/*
 * Cluster service API
 * The aggregated API  of Run:AI backend 
 *
 * OpenAPI spec version: 1.5.1
 *
 * NOTE: This class is auto generated by OpenAPI Generator.
 * https://github.com/OpenAPITools/openapi-generator
 *
 * OpenAPI generator version: 6.3.0-SNAPSHOT
 */


import http from "k6/http";
import { group, check, sleep } from "k6";

const BASE_URL = "https://test.run.ai";
// Sleep duration between successive requests.
// You might want to edit the value of this variable or remove calls to the sleep function on the script.
const SLEEP_DURATION = 0.1;
// Global variables should be initialized.

export default function() {
    group("/v1/k8s/clusters/{uuid}/services/count", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services/count`;
            let request = http.get(url);

            check(request, {
                "The services count": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/services/{serviceId}", () => {
        let serviceId = 'TODO_EDIT_THE_SERVICEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services/${serviceId}`;
            let request = http.get(url);

            check(request, {
                "A service": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services/${serviceId}`;
            let request = http.del(url);

            check(request, {
                "Deleted the service sucessfully": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{clusterId}/node-pools", () => {
        let clusterId = 'TODO_EDIT_THE_CLUSTERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools`;
            let request = http.get(url);

            check(request, {
                "Node pools returned successfully.": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "labelKey": "string", "labelValue": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Created": (r) => r.status === 201
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/sync", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/sync`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/liveness", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/liveness`;
            // TODO: edit the parameters of the request body.
            let body = {"timeTag": "long"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Expected response to a valid request (No content)": (r) => r.status === 204
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{clusterId}/node-pools/{id}/labels", () => {
        let clusterId = 'TODO_EDIT_THE_CLUSTERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools/${id}/labels`;
            // TODO: edit the parameters of the request body.
            let body = {"labelKey": "string", "labelValue": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Node Pool update accepted.": (r) => r.status === 202
            });
        }
    });

    group("/v1/k8s/clusters/{clusterId}/node-pools/{id}", () => {
        let clusterId = 'TODO_EDIT_THE_CLUSTERID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools/${id}`;
            let request = http.del(url);

            check(request, {
                "Node Pool deletion accepted": (r) => r.status === 202
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/count", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/count`;
            let request = http.get(url);

            check(request, {
                "The deployments count": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/podGroups/{podGroupId}", () => {
        let podGroupId = 'TODO_EDIT_THE_PODGROUPID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/podGroups/${podGroupId}`;
            // TODO: edit the parameters of the request body.
            let body = {"jobId": "uuid", "podGroupId": "uuid", "podGroupName": "string", "workloadName": "string", "workloadType": "string", "workloadKind": "string", "clusterUuid": "uuid", "imageName": "string", "podGroupPhase": "string", "jobPhase": "string", "workloadUser": "string", "project": "string", "nodeId": "string", "created": "long", "lastUpdated": "long", "parallelism": "integer", "completions": "integer", "currentRequestedGpus": "bigdecimal", "totalRequestedGpus": "bigdecimal", "requestedGpusPerPodgroup": "bigdecimal", "requestedGpusMemoryPerPodgroup": "bigdecimal", "parentWorkloadName": "string", "currentAllocatedGpus": "bigdecimal", "currentAllocatedGpusMemory": "bigdecimal", "totalRequestedCpu": "bigdecimal", "totalRequestedMemory": "bigdecimal", "totalLimitCpu": "bigdecimal", "totalLimitMemory": "bigdecimal", "cliCommand": "string", "requestedMigDevices": "string", "dynamicData": "object", "existsInCluster": "boolean", "jobUrlType": "string", "isJupyter": "boolean", "jobUrl": "string", "workspaceId": "string", "nodePool": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Created podGroup data in DB": (r) => r.status === 201
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/podGroups/${podGroupId}`;
            let request = http.del(url);

            check(request, {
                "Deleted the podGroup successfully": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{clusterId}/node-pools/status", () => {
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let clusterId = 'TODO_EDIT_THE_CLUSTERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools/status?name=${name}`;
            // TODO: edit the parameters of the request body.
            let body = {"status": "string", "statusMessage": "string", "nodes": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Node Pool updated successfully.": (r) => r.status === 201
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/deleted", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/deleted`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/{deploymentId}", () => {
        let deploymentId = 'TODO_EDIT_THE_DEPLOYMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/${deploymentId}`;
            let request = http.get(url);

            check(request, {
                "A deployment": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/${deploymentId}`;
            let request = http.del(url);

            check(request, {
                "Deleted the deployment successfully": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/pods/sync", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/pods/sync`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Created pods data in DB": (r) => r.status === 201
            });
        }
    });

    group("/v1/k8s/clusters/{clusterId}/node-pools/sync", () => {
        let clusterId = 'TODO_EDIT_THE_CLUSTERID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${clusterId}/node-pools/sync`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/services/sync", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services/sync`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Successful operation": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/jobs", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortDirection = 'TODO_EDIT_THE_SORTDIRECTION'; // specify value as there is no example value for this parameter in OpenAPI spec
        let limit = 'TODO_EDIT_THE_LIMIT'; // specify value as there is no example value for this parameter in OpenAPI spec
        let includeDeleted = 'TODO_EDIT_THE_INCLUDEDELETED'; // specify value as there is no example value for this parameter in OpenAPI spec
        let sortBy = 'TODO_EDIT_THE_SORTBY'; // specify value as there is no example value for this parameter in OpenAPI spec
        let from = 'TODO_EDIT_THE_FROM'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeId = 'TODO_EDIT_THE_NODEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/jobs?nodeId=${nodeId}&filter=${filter}&sortBy=${sortBy}&sortDirection=${sortDirection}&from=${from}&limit=${limit}&includeDeleted=${includeDeleted}`;
            let request = http.get(url);

            check(request, {
                "An array of Jobs": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/jobs/{jobId}/pods", () => {
        let jobId = 'TODO_EDIT_THE_JOBID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let name = 'TODO_EDIT_THE_NAME'; // specify value as there is no example value for this parameter in OpenAPI spec
        let id = 'TODO_EDIT_THE_ID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let podGroupId = 'TODO_EDIT_THE_PODGROUPID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeID = 'TODO_EDIT_THE_NODEID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let podId = 'TODO_EDIT_THE_PODID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let status = 'TODO_EDIT_THE_STATUS'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/jobs/${jobId}/pods?id=${id}&podId=${podId}&podGroupId=${podGroupId}&nodeID=${nodeID}&name=${name}&status=${status}`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/pods", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/pods`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/pods`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/deleted/count", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/deleted/count`;
            let request = http.get(url);

            check(request, {
                "The deleted deployments count": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/pods/{podId}", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let podId = 'TODO_EDIT_THE_PODID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/pods/${podId}`;
            // TODO: edit the parameters of the request body.
            let body = {"podId": "string", "jobId": "uuid", "podGroupId": "string", "clusterUuid": "uuid", "podName": "string", "imageName": "string", "nodeId": "string", "phase": "string", "status": "string", "created": "long", "completed": "long", "started": "long", "lastUpdated": "long", "dynamicData": "object", "existsInCluster": "boolean", "nodePool": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.put(url, JSON.stringify(body), params);

            check(request, {
                "Updated a pod in the DB": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/pods/${podId}`;
            let request = http.del(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments`;
            // TODO: edit the parameters of the request body.
            let body = {"clusterUuid": "uuid", "id": "uuid", "name": "string", "namespace": "string", "project": "string", "owners": "list", "createdAt": "date", "replicas": "integer", "template": {"containers": "list", "resourceRequest": "map"}, "schedulerName": "string", "username": "string", "serviceId": "uuid", "revisionId": "uuid", "inferenceworkloadName": "string", "conditions": "list", "nodePool": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Created": (r) => r.status === 201
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{cluster_uuid}/installfile", () => {
        let clusterUuid = 'TODO_EDIT_THE_CLUSTER_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let cloud = 'TODO_EDIT_THE_CLOUD'; // specify value as there is no example value for this parameter in OpenAPI spec
        let clusterip = 'TODO_EDIT_THE_CLUSTERIP'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${cluster_uuid}/installfile?cloud=${cloud}&clusterip=${clusterip}`;
            let request = http.get(url);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/deployments/{deploymentId}/pods", () => {
        let deploymentId = 'TODO_EDIT_THE_DEPLOYMENTID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/deployments/${deploymentId}/pods`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters", () => {

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters`;
            let request = http.get(url);

            check(request, {
                "A JSON array of Clusters": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters`;
            // TODO: edit the parameters of the request body.
            let body = {"name": "string", "description": "string"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "OK": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/services", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services`;
            let request = http.get(url);

            check(request, {
                "Expected response to a valid request": (r) => r.status === 200
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });

            sleep(SLEEP_DURATION);
        }

        // Request No. 2
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/services`;
            // TODO: edit the parameters of the request body.
            let body = {"clusterUuid": "uuid", "url": "string", "id": "uuid", "name": "string", "namespace": "string", "createdAt": "date"};
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, JSON.stringify(body), params);

            check(request, {
                "Created": (r) => r.status === 201
            });
            check(request, {
                "unexpected error": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/podGroups/sync", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/podGroups/sync`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Created podGroups data in DB": (r) => r.status === 201
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/jobs/count", () => {
        let filter = 'TODO_EDIT_THE_FILTER'; // specify value as there is no example value for this parameter in OpenAPI spec
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec
        let nodeId = 'TODO_EDIT_THE_NODEID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/jobs/count?nodeId=${nodeId}&filter=${filter}`;
            let request = http.get(url);

            check(request, {
                "The job count": (r) => r.status === 200
            });
        }
    });

    group("/v1/k8s/clusters/{uuid}/podGroups", () => {
        let uuid = 'TODO_EDIT_THE_UUID'; // specify value as there is no example value for this parameter in OpenAPI spec

        // Request No. 1
        {
            let url = BASE_URL + `/v1/k8s/clusters/${uuid}/podGroups`;
            let params = {headers: {"Content-Type": "application/json", "Accept": "application/json"}};
            let request = http.post(url, params);

            check(request, {
                "Created podGroup data in DB": (r) => r.status === 201
            });
        }
    });

}
